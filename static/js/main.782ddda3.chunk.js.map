{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","props","_this$state","length","add","alert","maxDate","this","react_default","a","createElement","Fragment","style","color","letterSpacing","marginTop","paddingTop","paddingBottom","fontSize","type","placeholder","onChange","htmlFor","id","min","max","onClick","Component","Task","_props$task","task","active","important","finishDate","change","delete","finished","toLocaleString","TaskList","tasks","filter","done","sort","b","toLowerCase","activeTasks","map","components_Task","key","doneTasks","className","App","counter","deleteTask","Object","toConsumableArray","index","findIndex","splice","changeTaskStatus","Array","from","forEach","getTime","addTask","prevState","concat","components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.782ddda3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass AddTask extends Component {\n  minDate = new Date().toISOString().slice(0, 10);\n\n  state = {\n    text: \"\",\n    checked: false,\n    date: this.minDate\n  };\n\n  handleText = e => {\n    this.setState({\n      text: e.target.value\n    });\n  };\n\n  handleCheckbox = e => {\n    this.setState({\n      checked: e.target.checked\n    });\n  };\n\n  handleDate = e => {\n    this.setState({\n      date: e.target.value\n    });\n  };\n\n  handleClick = props => {\n    const { text, checked, date } = this.state;\n    if (text.length > 2) {\n      const add = this.props.add(text, date, checked);\n      if (add) {\n        this.setState({\n          text: \"\",\n          checked: false,\n          date: this.minDate\n        });\n      }\n    } else {\n      alert(\"Type your task. \");\n    }\n  };\n\n  render() {\n    let maxDate = this.minDate.slice(0, 24) * 1 + 1;\n    maxDate = maxDate + \"-12-31\";\n\n    return (\n      <>\n        <h1\n          style={{\n            color: \"#FFA5A5\",\n            letterSpacing: \"2px\",\n            marginTop: \"0\",\n            paddingTop: \"55px\",\n            paddingBottom: \"20px\",\n            fontSize: \"23px\"\n          }}\n        >\n          ~ to do app ~\n        </h1>\n        <h3>add new :</h3>\n        <input\n          type=\"text\"\n          placeholder=\"add new task\"\n          value={this.state.text}\n          onChange={this.handleText}\n        />\n        <label htmlFor=\"important\">\n          important\n          <input\n            type=\"checkbox\"\n            id=\"important\"\n            checked={this.state.checked}\n            onChange={this.handleCheckbox}\n          />\n        </label>\n        <br />\n        <label htmlFor=\"date\">until:</label>\n        <input\n          type=\"date\"\n          value={this.state.date}\n          min={this.minDate}\n          max={maxDate}\n          onChange={this.handleDate}\n        />\n        <button onClick={this.handleClick}>add</button>\n\n        <hr />\n      </>\n    );\n  }\n}\n\nexport default AddTask;\n","import React from \"react\";\nconst Task = props => {\n  const { text, date, id, active, important, finishDate } = props.task;\n\n  const style = {\n    color: \"pink\"\n  };\n\n  if (active) {\n    return (\n      <div>\n        <p>\n          <strong style={important ? style : null}>{text}</strong> until{\" \"}\n          <span>{date}</span>\n          <button onClick={() => props.change(id)}>done</button>\n          <button onClick={() => props.delete(id)}>X</button>\n        </p>\n      </div>\n    );\n  } else {\n    const finished = new Date(finishDate).toLocaleString();\n\n    return (\n      <div>\n        <p>\n          <strong>{text}</strong> <em> until {date}</em>\n          <button onClick={() => props.delete(id)}>X</button>\n          <br />\n          <span> task completed: {finished}</span>\n        </p>\n      </div>\n    );\n  }\n};\n\nexport default Task;\n","import React from \"react\";\nimport Task from \"./Task\";\nconst TaskList = props => {\n  const active = props.tasks.filter(task => task.active);\n  const done = props.tasks.filter(task => !task.active);\n\n  // done.sort((a, b) => b.finishDate - a.finishDate);\n\n  if (done.length >= 2) {\n    done.sort((a, b) => {\n      if (a.finishDate < b.finishDate) {\n        return 1;\n      }\n      if (a.finishDate > b.finishDate) {\n        return -1;\n      }\n      return 0;\n    });\n  }\n\n  // alphabetical sorting of active tasks\n  if (active.length >= 2) {\n    active.sort((a, b) => {\n      a = a.text.toLowerCase();\n      b = b.text.toLowerCase();\n\n      if (a < b) return -1;\n      if (a > b) return 1;\n      return 0;\n    });\n  }\n\n  const activeTasks = active.map(task => (\n    <Task key={task.id} task={task} delete={props.delete} change={props.change}>\n      {task.text}\n    </Task>\n  ));\n  const doneTasks = done.map(task => (\n    <Task key={task.id} task={task} delete={props.delete} change={props.change}>\n      {task.text}\n    </Task>\n  ));\n\n  /* App will display only last 10 tasks */\n\n  return (\n    <>\n      <div className=\"active\">\n        <h1>to do:</h1>\n        {activeTasks.length > 0 ? (\n          activeTasks\n        ) : (\n          <p className=\"message\">\n            you've done everything! enjoy your day :) !!\n          </p>\n        )}\n      </div>\n      <div className=\"done\">\n        <h1>done ( {done.length} ):</h1>\n        {done.length > 10 && <span>see your last 10 tasks:</span>}\n        {doneTasks.slice(0, 10)}\n      </div>\n    </>\n  );\n};\n\nexport default TaskList;\n","import React, { Component } from \"react\";\nimport AddTask from \"./AddTask\";\n// import Task from \"./Task\";\nimport TaskList from \"./TaskList\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  counter = 4;\n\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: \"Clean my flat\",\n        date: \"2019-05-12\",\n        important: false,\n        active: true,\n        finishDate: null\n      },\n      {\n        id: 1,\n        text: \"Gain 5kg\",\n        date: \"2019-03-05\",\n        important: false,\n        active: true,\n        finishDate: null\n      },\n      {\n        id: 2,\n        text: \"Drink 2L of water daily\",\n        date: \"2019-02-12\",\n        important: false,\n        active: true,\n        finishDate: null\n      },\n      {\n        id: 3,\n        text: \"Buy a new car\",\n        date: \"2019-12-31\",\n        important: true,\n        active: true,\n        finishDate: null\n      }\n    ]\n  };\n\n  deleteTask = id => {\n    const tasks = [...this.state.tasks];\n\n    const index = tasks.findIndex(task => task.id === id);\n    tasks.splice(index, 1);\n\n    this.setState({\n      tasks\n    });\n  };\n\n  changeTaskStatus = id => {\n    const tasks = Array.from(this.state.tasks);\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    });\n    this.setState({\n      tasks\n    });\n  };\n\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text,\n      date,\n      important,\n      active: true,\n      finishDate: null\n    };\n    this.counter++;\n\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }));\n\n    return true;\n  };\n\n  render() {\n    return (\n      <>\n        <AddTask add={this.addTask} />\n        <TaskList\n          delete={this.deleteTask}\n          change={this.changeTaskStatus}\n          tasks={this.state.tasks}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}